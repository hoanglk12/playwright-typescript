trigger:
  branches:
    include:
      - main
      - master
      - develop
  paths:
    include:
      - src/**
      - tests/**
      - '*.config.ts'
      - package.json
      - azure-pipelines.yml

pr:
  branches:
    include:
      - main
      - master
      - develop
  paths:
    include:
      - src/**
      - tests/**
      - '*.config.ts'
      - package.json

parameters:
  - name: environment
    displayName: 'Test environment'
    type: string
    default: 'testing'
    values:
      - testing
      - staging
      - production
  - name: mode
    displayName: 'Test execution mode'
    type: string
    default: 'parallel'
    values:
      - parallel
      - serial
  - name: workers
    displayName: 'Number of workers (for parallel mode)'
    type: string
    default: '4'
  - name: browser
    displayName: 'Browser to test with'
    type: string
    default: 'all'
    values:
      - all
      - chromium
      - firefox
      - webkit
  - name: test_type
    displayName: 'Type of tests to run'
    type: string
    default: 'both'
    values:
      - both
      - ui
      - api

variables:
  nodeVersion: '20.x'
  CI: true
  TEST_ENV: ${{ parameters.environment }}
  TEST_MODE: ${{ parameters.mode }}
  TEST_WORKERS: ${{ parameters.workers }}
  TEST_BROWSER: ${{ parameters.browser }}
  TEST_TYPE: ${{ parameters.test_type }}

stages:
- stage: UITests
  displayName: 'UI Tests'
  condition: and(succeeded(), ne('${{ parameters.test_type }}', 'api'))
  jobs:
  - job: UITests
    displayName: 'Run UI Tests'
    timeoutInMinutes: 45
    strategy:
      matrix:
        Windows:
          imageName: 'windows-latest'
          osName: 'Windows'
          scriptExt: 'bat'
        macOS:
          imageName: 'macos-latest'
          osName: 'macOS'
          scriptExt: 'sh'
      maxParallel: 2
    pool:
      vmImage: $(imageName)
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'

    - task: Cache@2
      inputs:
        key: 'npm | "$(Agent.OS)" | package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
        path: ~/.npm
      displayName: 'Cache npm'

    - task: Cache@2
      inputs:
        key: 'playwright | "$(Agent.OS)" | package-lock.json'
        restoreKeys: |
          playwright | "$(Agent.OS)"
        path: |
          ~/.cache/ms-playwright
          ~/Library/Caches/ms-playwright
          %USERPROFILE%\AppData\Local\ms-playwright
      displayName: 'Cache Playwright browsers'

    - script: npm ci
      displayName: 'Install dependencies'

    - script: npx playwright install --with-deps
      displayName: 'Install Playwright Browsers'

    - script: |
        echo "Test Environment: $(TEST_ENV)"
        echo "Test Mode: $(TEST_MODE)"
        echo "Workers: $(TEST_WORKERS)"
        echo "Browser: $(TEST_BROWSER)"
        echo "OS: $(osName)"
      displayName: 'Display test configuration'

    - script: |
        chmod +x ./run-ui-tests.sh
        chmod +x ./run-api-tests-nonparallel.sh
      condition: ne(variables['Agent.OS'], 'Windows_NT')
      displayName: 'Make UI test scripts executable (Unix)'

    - script: ./run-ui-tests.sh $(TEST_ENV) $(TEST_MODE) $(TEST_WORKERS)
      condition: ne(variables['Agent.OS'], 'Windows_NT')
      displayName: 'Run UI tests (Unix)'
      env:
        BROWSER: $(TEST_BROWSER)

    - script: ./run-ui-tests.bat $(TEST_ENV) $(TEST_MODE) $(TEST_WORKERS)
      condition: eq(variables['Agent.OS'], 'Windows_NT')
      displayName: 'Run UI tests (Windows)'
      env:
        BROWSER: $(TEST_BROWSER)

    - script: |
        echo "## UI Test Results Summary" > test_summary.md
        echo "- **Environment**: $(TEST_ENV)" >> test_summary.md
        echo "- **Mode**: $(TEST_MODE)" >> test_summary.md
        echo "- **Workers**: $(TEST_WORKERS)" >> test_summary.md
        echo "- **Browser**: $(TEST_BROWSER)" >> test_summary.md
        echo "- **OS**: $(osName)" >> test_summary.md
        echo "- **Status**: $(Agent.JobStatus)" >> test_summary.md
      condition: always()
      displayName: 'Generate test summary'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/results.xml'
        searchFolder: 'test-results'
        mergeTestResults: true
        testRunTitle: 'UI Tests - $(osName)'
      condition: always()
      displayName: 'Publish UI test results'

    - task: PublishHtmlReport@1
      inputs:
        reportDir: 'playwright-report'
        tabName: 'UI Test Report - $(osName)'
      condition: always()
      displayName: 'Publish UI HTML report'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: |
          test-results/
          playwright-report/
          screenshots/
          videos/
          test_summary.md
        artifactName: 'ui-test-results-$(osName)-$(TEST_ENV)-$(TEST_MODE)'
      condition: always()
      displayName: 'Upload UI Test Results'

- stage: APITests
  displayName: 'API Tests'
  condition: and(succeeded(), ne('${{ parameters.test_type }}', 'ui'))
  jobs:
  - job: APITests
    displayName: 'Run API Tests'
    timeoutInMinutes: 30
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'

    - task: Cache@2
      inputs:
        key: 'npm | "$(Agent.OS)" | package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
        path: ~/.npm
      displayName: 'Cache npm'

    - script: npm ci
      displayName: 'Install dependencies'

    - script: chmod +x ./run-api-tests-nonparallel.sh
      displayName: 'Make API test scripts executable'

    - script: |
        echo "API Test Environment: $(TEST_ENV)"
        echo "API Base URL: ${API_BASE_URL:-https://restful-booker.herokuapp.com}"
        echo "Execution: Serial (1 worker)"
      displayName: 'Display API test configuration'

    - script: ./run-api-tests-nonparallel.sh
      displayName: 'Run API tests'
      env:
        API_ENV: $(TEST_ENV)

    - script: |
        echo "## API Test Results Summary" > api_test_summary.md
        echo "- **Environment**: $(TEST_ENV)" >> api_test_summary.md
        echo "- **Execution**: Serial (1 worker)" >> api_test_summary.md
        echo "- **Status**: $(Agent.JobStatus)" >> api_test_summary.md
      condition: always()
      displayName: 'Generate API test summary'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/results.xml'
        searchFolder: 'api-results'
        mergeTestResults: true
        testRunTitle: 'API Tests'
      condition: always()
      displayName: 'Publish API test results'

    - task: PublishHtmlReport@1
      inputs:
        reportDir: 'api-report'
        tabName: 'API Test Report'
      condition: always()
      displayName: 'Publish API HTML report'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: |
          test-results/api/
          api-results/
          api-report/
          playwright-report/
          api_test_summary.md
        artifactName: 'api-test-results-$(TEST_ENV)'
      condition: always()
      displayName: 'Upload API Test Results'

- stage: TestReport
  displayName: 'Generate Combined Test Report'
  condition: always()
  dependsOn: 
    - UITests
    - APITests
  jobs:
  - job: TestReport
    displayName: 'Combine and Publish All Reports'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ui-test-results-Windows-$(TEST_ENV)-$(TEST_MODE)'
        targetPath: './combined-results/ui/windows/'
      condition: and(always(), ne('${{ parameters.test_type }}', 'api'))
      continueOnError: true
      displayName: 'Download Windows UI reports'

    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ui-test-results-macOS-$(TEST_ENV)-$(TEST_MODE)'
        targetPath: './combined-results/ui/macos/'
      condition: and(always(), ne('${{ parameters.test_type }}', 'api'))
      continueOnError: true
      displayName: 'Download macOS UI reports'

    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'api-test-results-$(TEST_ENV)'
        targetPath: './combined-results/api/'
      condition: and(always(), ne('${{ parameters.test_type }}', 'ui'))
      continueOnError: true
      displayName: 'Download API reports'

    - script: |
        mkdir -p ./combined-report
        cat > ./combined-report/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>Playwright Test Reports - Build $(Build.BuildNumber)</title>
            <style>
                body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 40px; background: #f5f5f5; }
                .container { max-width: 1200px; margin: 0 auto; background: white; padding: 40px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                .header { text-align: center; margin-bottom: 40px; }
                .build-info { background: #e3f2fd; padding: 20px; border-radius: 8px; margin-bottom: 30px; }
                .report-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
                .report-card { 
                    border: 1px solid #e0e0e0; 
                    border-radius: 8px; 
                    padding: 24px; 
                    text-decoration: none; 
                    color: #333;
                    transition: all 0.2s;
                    background: #fff;
                }
                .report-card:hover { 
                    box-shadow: 0 4px 12px rgba(0,0,0,0.15); 
                    transform: translateY(-2px);
                    text-decoration: none;
                    color: #333;
                }
                .report-icon { font-size: 48px; margin-bottom: 16px; }
                .report-title { color: #0078d4; margin: 0 0 12px 0; font-size: 20px; }
                .report-desc { color: #666; margin: 0; line-height: 1.5; }
                .meta { text-align: center; margin-top: 30px; color: #888; font-size: 14px; }
                .os-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-top: 15px; }
                .os-card { background: #f8f9fa; padding: 15px; border-radius: 6px; text-align: center; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>🎭 Playwright Test Reports</h1>
                    <p>Comprehensive test results for UI and API testing</p>
                </div>
                
                <div class="build-info">
                    <strong>Build:</strong> $(Build.BuildNumber) | 
                    <strong>Branch:</strong> $(Build.SourceBranchName) | 
                    <strong>Commit:</strong> $(Build.SourceVersion) |
                    <strong>Date:</strong> $(Build.QueueTime)
                </div>
                
                <div class="report-grid">
                    <div class="report-card">
                        <div class="report-icon">🖥️</div>
                        <h2 class="report-title">UI Tests</h2>
                        <p class="report-desc">Browser-based end-to-end tests covering user interactions and workflows</p>
                        <div class="os-grid">
                            <div class="os-card">
                                <strong>🪟 Windows</strong><br>
                                <a href="ui/windows/playwright-report/">View Report</a>
                            </div>
                            <div class="os-card">
                                <strong>🍎 macOS</strong><br>
                                <a href="ui/macos/playwright-report/">View Report</a>
                            </div>
                        </div>
                    </div>
                    <a href="api/" class="report-card">
                        <div class="report-icon">🔌</div>
                        <h2 class="report-title">API Tests</h2>
                        <p class="report-desc">RESTful API integration tests for Restful Booker service</p>
                    </a>
                </div>
                
                <div class="meta">
                    <p>Generated by Azure DevOps Pipeline on $(date)</p>
                </div>
            </div>
        </body>
        </html>
        EOF
      displayName: 'Create combined report index'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: ./combined-report/
        artifactName: 'combined-test-report-$(TEST_ENV)'
      displayName: 'Publish combined reports'

- stage: NotifyResults
  displayName: 'Notify Test Results'
  condition: always()
  dependsOn: 
    - UITests
    - APITests
    - TestReport
  jobs:
  - job: NotifyResults
    displayName: 'Generate Test Summary'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        echo "## 🎭 Playwright Test Results" > pipeline_summary.md
        echo "" >> pipeline_summary.md
        echo "### Configuration" >> pipeline_summary.md
        echo "- **Environment**: $(TEST_ENV)" >> pipeline_summary.md
        echo "- **Mode**: $(TEST_MODE)" >> pipeline_summary.md
        echo "- **Workers**: $(TEST_WORKERS)" >> pipeline_summary.md
        echo "- **Browser**: $(TEST_BROWSER)" >> pipeline_summary.md
        echo "- **Test Type**: $(TEST_TYPE)" >> pipeline_summary.md
        echo "" >> pipeline_summary.md
        echo "### Results" >> pipeline_summary.md
        echo "- **Build**: $(Build.BuildNumber)" >> pipeline_summary.md
        echo "- **Branch**: $(Build.SourceBranchName)" >> pipeline_summary.md
        echo "- **Commit**: $(Build.SourceVersion)" >> pipeline_summary.md
        echo "" >> pipeline_summary.md
        echo "### Artifacts" >> pipeline_summary.md
        echo "- Test results are available in the pipeline artifacts" >> pipeline_summary.md
        echo "- Reports include screenshots, videos, and HTML reports" >> pipeline_summary.md
        echo "- Retention period: 30 days" >> pipeline_summary.md
        cat pipeline_summary.md
      displayName: 'Generate pipeline summary'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: pipeline_summary.md
        artifactName: 'pipeline-summary'
      displayName: 'Publish summary'
